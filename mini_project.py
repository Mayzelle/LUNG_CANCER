# -*- coding: utf-8 -*-
"""Mini_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19MEgDgtPqhCNuhk75kUywo1EI-OHY7Pc

Lung Cancer Prediction Using Maching Learning

By ( your name )

Project Introduction
"""



# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
from IPython import get_ipython
import warnings
warnings.filterwarnings("ignore")

# locally importing the dataset from our local computer
from google.colab import files 
upload = files.upload()

data = pd.read_csv('lung_cancer_data.csv')

data.head(15)

data.tail()

data.shape

data.columns

data.duplicated().sum()

data = data.drop_duplicates()

data.isnull().sum()

data.info ()

data.describe()

from sklearn import preprocessing

label_encoder = preprocessing.LabelEncoder()

data['GENDER']= label_encoder.fit_transform(data['GENDER'])
data['LUNG_CANCER']= label_encoder.fit_transform(data['LUNG_CANCER'])

data.info()

data.head()

data.nunique()

data.columns

data_new = data[['GENDER', 'SMOKING', 'YELLOW_FINGERS', 'ANXIETY', 'PEER_PRESSURE', 'CHRONIC DISEASE', 'FATIGUE', 'ALLERGY', 'WHEEZING', 'ALCOHOL CONSUMING', 'COUGHING', 'SHORTNESS OF BREATH', 'SWALLOWING DIFFICULTY', 'CHEST PAIN', 'LUNG_CANCER']]

import matplotlib.pyplot as plt
import seaborn as sns

for i in data_new.columns:
  plt.figure(figsize=(15,6))
  sns.countplot(data_new[i], data = data_new,
                palette = 'his')
  plt.xticks(rotation = 90)
  plt.show()

for i in data_new.columns:
  data_new[i].value_counts().plot(kind='pie',
                                  figsize=(8, 8),
                                  autopct='%1.1f%%')
  plt.xticks(rotation = 90)
  plt.show()

data_new['LUNG_CANCER'].unique()

data_new['LUNG_CANCER'].value_counts()

100. *data_new.LUNG_CANCER.value_counts() / len(data_new.LUNG_CANCER)

plt.figure(figsize=(15, 6))
sns.histplot(data['AGE'])
plt.xticks(rotation = 90)
plt.show()

data_new['GENDER'].unique()

data_new['GENDER'].value_counts()

100. *data_new.GENDER.value_counts() / len(data_new.GENDER)

plt.figure(figsize=(15,6))
sns.countplot('GENDER',data=data_new,hue='LUNG_CANCER',
              palette='hls')
plt.xticks(rotation = 90)
plt.show()

plt.figure(figsize=(15,6)) 
sns.countplot(data=data_new,x='COUGHING',hue='LUNG_CANCER') 
plt.legend(["Has cancer", 'Does not have cancer']) 
plt.xticks(rotation = 90)
plt.show()

plt.figure(figsize=(15,6)) 
sns.countplot(data=data_new,x='YELLOW_FINGERS',hue='LUNG_CANCER') 
plt.legend(["Has cancer", 'Does not have cancer'])
plt.xticks(rotation = 90)
plt.show()

plt.figure(figsize=(15,6)) 
sns.countplot(data=data_new,x='SHORTNESS OF BREATH',hue='LUNG_CANCER') 
plt.legend(["Has cancer", 'Does not have cancer'])
plt.xticks(rotation = 90)
plt.show()

plt.figure(figsize=(15,6)) 
sns.countplot(data=data_new,x='ANXIETY',hue='LUNG_CANCER') 
plt.legend(["Has cancer", 'Does not have cancer'])
plt.xticks(rotation = 90)
plt.show()

plt.figure(figsize=(15,6)) 
sns.distplot(data['AGE'])
plt.xticks(rotation = 90)
plt.show()

cormat = data_new.corr()
cormat

cmap = sns.diverging_palette(260,-10,s=50, l=75, n=6, 
                             as_cmap=True)
plt.subplots(figsize=(18,18))
sns.heatmap(cormat,cmap=cmap,annot=True,square=True)
plt.show()

x = data_new.drop('LUNG_CANCER', axis = 1) 
y = data_new['LUNG_CANCER']

from sklearn.model_selection import train_test_split 
x_train, x_test, y_train, y_test= train_test_split(x, y,
                                                  test_size= 0.25,
                                                  random_state=0)

from sklearn.linear_model import LogisticRegression 
classifier= LogisticRegression(random_state=0) 
classifier.fit(x_train, y_train)

y_pred= classifier.predict(x_test)

from sklearn.metrics import accuracy_score, mean_absolute_error , mean_squared_error

from sklearn.metrics import plot_roc_curve

print("Mean absolute error is ",( mean_absolute_error(y_test,y_pred))) 
print("Mean squared error is " , mean_squared_error(y_test,y_pred)) 
print("Accuracy is " , round(accuracy_score(y_test,y_pred)*100,2),"%")

matrix = confusion_matrix (y_test, y_pred, labels=[1,0])
print('Confusion matrix : \n',matrix)

tp, fn, fp, tn = confusion_matrix(y_test,y_pred,labels=[1,0]).reshape(-1)
print('Outcome values : \n', tp, fn, fp, tn)

matrix = classification_report(y_test,y_pred,labels=[1,0])
print('Classification report : \n',matrix)